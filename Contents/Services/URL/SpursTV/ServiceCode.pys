KS_RETRIEVAL_URL = "http://open.http.mmp.streamuk.com/html5/html5lib/v2.0.RC3/mwEmbedFrame.php?&uiconf_id=11170445&wid=_2000012&p=2000012"

ENTRY_ID_RE = Regex('entry_id/([^/]*)')

####################################################################################################
def MetadataObjectForURL(url):
    # Retrieve session key
    try:
        import re
        ksfind = re.compile(r'.*"ks"\s*:\s*"([^"]*)".*', re.DOTALL)
        ks_scripts = HTML.ElementFromURL(KS_RETRIEVAL_URL, cacheTime=86400).xpath('//script[@type="text/javascript"]//text()')
        ks_list = [ ksfind.sub(r'\1', s) for s in ks_scripts if 'kalturaIframePackageData = ' in s ]
        ks = ks_list[0]
    except:
        raise Ex.MediaExpired

    # Attempt to retrieve the object's metadata
    try:
        # Parse the entry_id out of the URL
        entry_id = ENTRY_ID_RE.search(url).group(1)

        # Batch request info on videos
        infoXml = XML.ObjectFromURL(url="http://mmp.streamuk.com/api_v3/index.php?service=baseEntry&action=get",
                                    values={'ks' : ks, 'entryId' : entry_id})
        entry = infoXml.xpath('//result')[0]
    except:
        raise Ex.MediaNotAvailable

    # Create video object
    vco = VideoClipObject(
        url = entry.downloadUrl.text,
        title = entry.name.text,
        thumb = Resource.ContentsOfURLWithFallback(entry.thumbnailUrl.text),
        duration = int(entry.msDuration.text),
        summary = entry.description.text
    )
    return(vco)


####################################################################################################
def MediaObjectsForURL(url):
    return [
        MediaObject(
            parts = [PartObject(key=Callback(PlayVideo, url = url))],
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            audio_channels = 2,
            optimized_for_streaming = True
        )
    ]
# TODO Look into how to return the various quality levels
#   https://en.wikipedia.org/wiki/List_of_common_resolutions


#####################################################################################################
def PlayVideo(url):
    # Retrieve session key
    try:
        import re
        ksfind = re.compile(r'.*"ks"\s*:\s*"([^"]*)".*', re.DOTALL)
        ks_scripts = HTML.ElementFromURL(KS_RETRIEVAL_URL, cacheTime=86400).xpath('//script[@type="text/javascript"]//text()')
        ks_list = [ ksfind.sub(r'\1', s) for s in ks_scripts if 'kalturaIframePackageData = ' in s ]
        ks = ks_list[0]
    except:
        raise Ex.MediaExpired

    # Parse the entry_id out of the URL
    entry_id = ENTRY_ID_RE.search(url).group(1)

    # Get flavor list (video types/containers)
    flavorXml = XML.ObjectFromURL(url="http://mmp.streamuk.com/api_v3/index.php?service=flavorAsset&action=getByEntryId",
                                values={'ks' : ks, 'entryId' : entry_id})

    # Get flavor we want (MP4, max resolution) - Determine resolution based on end device?
    flavorIdRaw = flavorXml.xpath('//item[width=1920]/id/text()')
    if(flavorIdRaw > 0):
        flavorId = flavorIdRaw[0]
    else:
        raise Ex.MediaNotAvailable

    # Get actual video URL
    videoUrlXml = XML.ObjectFromURL(url="http://mmp.streamuk.com/api_v3/index.php?service=flavorAsset&action=getUrl",
                               values={'ks' : ks, 'id' : flavorId, 'storageId' : 0})
    urls = videoUrlXml.xpath('/xml/result//text()')

    # Quit if we didn't get a video url
    if(len(urls) < 1):
        raise Ex.MediaNotAvailable

    return Redirect(urls[0])


#####################################################################################################
def NormalizeURL(url):
	return url
# TODO Normalize the .com URLs to the download URL

